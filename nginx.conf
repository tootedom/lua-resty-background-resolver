
#user  nobody;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # lua_package_path "/path/to/lua-resty-chash/lib/?.lua;;";
    # lua_package_cpath "/path/to/lua-resty-chash/?.so;;";

    init_worker_by_lua_block {
        local resolver = require 'resty.greencheek.dynamic.background-resolver'
        local dns = require 'resty.greencheek.dynamic.multi-background-resolver'

        local config = { dns_resolver = { { '127.0.0.1', 53 } }, refresh_interval = 30, balancing_type = 'chash' }
        local round_robin_config = { dns_resolver = { { '127.0.0.1', 53 } }, refresh_interval = 30 }
        local google = { dns_resolver = { { '8.8.4.4', 53 } }, refresh_interval = 30 }

        memcached_bgdns = resolver.new('mymemcached',config)
        backend_bgdns = resolver.new('localhost',round_robin_config)
        bbc_bgdns = resolver.new('www.bbc.co.uk', {
            dns_resolver = {
                { '10.10.0.2', 53},
                { '8.8.8.8', 53}
            },
        })

        local addresses_to_lookup = {}
        table.insert(addresses_to_lookup,{ ['id'] = 'bbc', ['dns_name'] = 'www.bbc.co.uk' })
        table.insert(addresses_to_lookup,{ ['id'] = 'google', ['dns_name'] = 'www.google.co.uk' })

        local obj, err = dns.start(addresses_to_lookup, google)

        if err ~= nil then
            ngx.log(ngx.CRIT,"Unable to start dns resolution",err)
        end

        local obj, err = dns.start({ "www.amazon.co.uk", "news.bbc.co.uk" } , google)
        if err ~= nil then
            ngx.log(ngx.CRIT,"Unable to start dns resolution",err)
        end

        local obj, err = dns.start({ "www.amazon.com", "www.netflix.com" })
        if err ~= nil then
            ngx.log(ngx.CRIT,"Unable to start dns resolution",err)
        end
    }

    upstream bbc_upstream {
        server 0.0.0.1;
        balancer_by_lua_block {
            local b = require "ngx.balancer"
            local server = bbc_bgdns.next(ngx.var.uri)
            if server ~= nil then
                assert(b.set_current_peer(server,443))
            end
        }
        keepalive 10;
    }

    upstream backend_chash {
        server 0.0.0.1;
        balancer_by_lua_block {
            local b = require "ngx.balancer"
            local s, err = backend_bgdns.next(ngx.var.arg_key)
            if err == nil then
                assert(b.set_current_peer(s,1985))
            end
        }
        keepalive 10;
    }

    upstream memcached_upstream_by_balancer {
        server 0.0.0.1;
        balancer_by_lua_block {
            local b = require "ngx.balancer"
            local memcached_server, err = memcached_bgdns.next(ngx.var.arg_key)
            if err == nil then
                assert(b.set_current_peer(memcached_server,11211))
            end
        }
        keepalive 10;
    }

    upstream bbc_upstream_generic {
        include upstream.include;
        keepalive 10;
    }

    upstream google_upstream_generic {
        include upstream.include;
        keepalive 1;
    }

    upstream news_upstream_generic {
        include upstream.include;
        keepalive 1;
    }

    upstream amz_upstream_generic {
        include upstream.include;
        keepalive 1;
    }

    upstream am_upstream_generic {
        include upstream.include;
        keepalive 1;
    }

    upstream netflix_upstream_generic {
        include upstream.include;
        keepalive 1;
    }

    server {
        listen 81;

        location /bbc {
            proxy_pass https://bbc_upstream/;
            proxy_set_header "Host" "www.bbc.co.uk";
            proxy_set_header "User-Agent" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36";
            proxy_redirect     off;
        }

        location /bbc2 {
            set $appname "bbc";
            set $appname_port "443";
            proxy_pass https://bbc_upstream_generic/;
            proxy_set_header "Host" "www.bbc.co.uk";
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_set_header "User-Agent" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36";
            proxy_redirect     off;
        }

        location /goo {
            set $appname "google";
            set $appname_port "443";
            proxy_pass https://google_upstream_generic/;
            proxy_set_header "Host" "www.google.co.uk";
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_set_header "User-Agent" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36";
            proxy_redirect     off;
        }

        location /amz {
            set $appname "www.amazon.co.uk";
            set $appname_port "443";
            proxy_pass https://amz_upstream_generic/robots.txt;
            proxy_set_header "Host" "www.amazon.co.uk";
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_set_header "User-Agent" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36";
            proxy_redirect     off;
        }

        location /news {
            set $appname "news.bbc.co.uk";
            set $appname_port "80";
            proxy_pass http://news_upstream_generic/robots.txt;
            proxy_set_header "Host" "news.bbc.co.uk";
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_set_header "User-Agent" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36";
            proxy_redirect     off;
        }

        location /netflix {
            set $appname "www.netflix.com";
            set $appname_port "443";
            proxy_pass https://netflix_upstream_generic/robots.txt;
            proxy_set_header "Host" "www.netflix.com";
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_set_header "User-Agent" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36";
            proxy_redirect     off;
        }

        location /chash {
            set_escape_uri $key $uri$args;
            add_header X-Cache-Status $srcache_fetch_status always;
            add_header X-Cache-Expiry $srcache_expire always;
            srcache_fetch GET /memc key=$key;
            srcache_store PUT /memc key=$key&exptime=$srcache_expire;
            srcache_store_statuses 200 301 302;

            rewrite /chash/(.*) /$1  break;
            proxy_pass http://backend_chash;
            proxy_redirect     off;
            proxy_hide_header Content-Length;


            add_header X-Upstream  $upstream_addr always;
        }

        location = /memc {
            internal;

            set_unescape_uri $exptime $arg_exptime;
            set_unescape_uri $key $arg_key;

            memc_connect_timeout 100ms;
            memc_send_timeout 100ms;
            memc_read_timeout 100ms;
            memc_ignore_client_abort on;

            set $memc_key $key;
            set $memc_exptime $exptime;

            memc_pass memcached_upstream_by_balancer;
        }

    }
}
