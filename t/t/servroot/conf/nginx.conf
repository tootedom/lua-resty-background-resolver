worker_processes  1;
daemon on;
master_process off;
error_log /data/t/t/servroot/logs/error.log debug;
pid       /data/t/t/servroot/logs/nginx.pid;
env MOCKEAGAIN_VERBOSE;
env MOCKEAGAIN;
env MOCKEAGAIN_WRITE_TIMEOUT_PATTERN;
env LD_PRELOAD;
env LD_LIBRARY_PATH;
env DYLD_INSERT_LIBRARIES;
env DYLD_FORCE_FLAT_NAMESPACE;
#env LUA_PATH;
#env LUA_CPATH;



http {
    access_log /data/t/t/servroot/logs/access.log;
    #access_log off;

    default_type text/plain;
    keepalive_timeout  68;



    lua_package_path "/data/t/lib/?.lua;/usr/local/openresty/lualib/resty/?.lua;;";

lua_shared_dict dns_entries 1m;

init_worker_by_lua_block {
  local resolver = require 'resty.greencheek.dynamic.background-resolver'
  local config = { dns_resolver = { { '127.0.0.1', 1953 } }, dns_resolver_id = 125, refresh_interval = 2 , ip_black_list = { ['127.0.53.53'] = true, ['127.0.0.98'] = true } }
  bgdns = resolver.new('www.google.com',config)
}


    server {
        listen          1984;
        server_name     'localhost';

        client_max_body_size 30M;
        #client_body_buffer_size 4k;

        # Begin preamble config...

        # End preamble config...

        # Begin test case config...
    location /t {
        content_by_lua '
            ngx.sleep(4)
            ngx.say("records: ",bgdns.next(ngx.var.host))
            ngx.say("records: ",bgdns.next(ngx.var.host))
            ngx.say("records: ",bgdns.next(ngx.var.host))
            ngx.say("records: ",bgdns.next(ngx.var.host))
        ';
    }

        # End test case config.

        location / {
            root /data/t/t/servroot/html;
            index index.html index.htm;
        }
    }
}



#timer_resolution 100ms;

events {
    accept_mutex off;

    worker_connections  64;
}
env ASAN_OPTIONS;
